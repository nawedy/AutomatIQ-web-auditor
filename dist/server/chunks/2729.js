exports.id=2729,exports.ids=[2729],exports.modules={56941:(e,t,i)=>{"use strict";i.d(t,{J:()=>d});var r=function(e){return e.AUDIT_COMPLETED="AUDIT_COMPLETED",e.SCORE_ALERT="SCORE_ALERT",e.SCORE_DROP="SCORE_DROP",e.CATEGORY_DROP="CATEGORY_DROP",e.CRITICAL_ISSUE="CRITICAL_ISSUE",e.MONITORING_ALERT="MONITORING_ALERT",e.SYSTEM="SYSTEM",e}({}),a=function(e){return e.IN_APP="IN_APP",e.EMAIL="EMAIL",e.SMS="SMS",e.WEBHOOK="WEBHOOK",e}({}),o=function(e){return e.LOW="LOW",e.MEDIUM="MEDIUM",e.HIGH="HIGH",e.CRITICAL="CRITICAL",e}({}),s=i(49526);class n{constructor(e){this.config=e,this.transporter=s.createTransporter({host:e.host,port:e.port,secure:e.secure,auth:{user:e.user,pass:e.password}})}async sendEmail(e){try{await this.transporter.sendMail({from:this.config.from,to:e.to,subject:e.subject,html:e.html,text:e.text}),console.log(`Email sent to ${e.to}: ${e.subject}`)}catch(e){throw console.error("Failed to send email:",e),e}}async sendAuditCompleteEmail(e,t,i,r,a){let o=`
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Audit Complete</title>
      </head>
      <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
          <h1 style="color: white; margin: 0; font-size: 28px;">AuditPro</h1>
          <p style="color: white; margin: 10px 0 0 0; opacity: 0.9;">Website Audit Complete</p>
        </div>
        
        <div style="background: white; padding: 30px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
          <h2 style="color: #333; margin-top: 0;">Audit Results for ${t}</h2>
          
          <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 15px;">
              <span style="font-size: 18px; font-weight: bold;">Overall Score:</span>
              <span style="font-size: 24px; font-weight: bold; color: ${i>=80?"#10B981":i>=60?"#F59E0B":"#EF4444"};">${i}/100</span>
            </div>
            
            <div style="display: flex; align-items: center; justify-content: space-between;">
              <span style="font-size: 16px;">Issues Found:</span>
              <span style="font-size: 18px; font-weight: bold; color: ${r>0?"#EF4444":"#10B981"};">${r}</span>
            </div>
          </div>
          
          <p>Your website audit has been completed successfully. ${r>0?"We found some areas for improvement.":"Great job! Your website is performing well."}</p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${a}" style="background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: bold; display: inline-block;">View Full Report</a>
          </div>
        </div>
      </body>
      </html>
    `;await this.sendEmail({to:e,subject:`Audit Complete: ${t} - Score: ${i}/100`,html:o,text:`Audit Complete for ${t}
Score: ${i}/100
Issues Found: ${r}
View report: ${a}`})}async sendScheduledAuditReminder(e,t,i){let r=`
      <!DOCTYPE html>
      <html>
      <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2>Scheduled Audit Reminder</h2>
        <p>This is a reminder that an audit for <strong>${t}</strong> is scheduled to run at ${i}.</p>
        <p>You will receive another email once the audit is complete.</p>
      </body>
      </html>
    `;await this.sendEmail({to:e,subject:`Scheduled Audit Reminder: ${t}`,html:r,text:`Scheduled audit reminder for ${t} at ${i}`})}}let c=new n({host:process.env.EMAIL_HOST||"smtp.gmail.com",port:Number.parseInt(process.env.EMAIL_PORT||"587"),secure:"true"===process.env.EMAIL_SECURE,user:process.env.EMAIL_USER||"",password:process.env.EMAIL_PASSWORD||"",from:process.env.EMAIL_FROM||"noreply@auditpro.com"});class l{constructor(e){this.prisma=e}async sendWebhook(e,t,i){try{let r=await this.prisma.webhookConfiguration.findMany({where:{userId:e,active:!0,events:{has:t}}});if(!r||0===r.length)return;let a={event:t,data:i,timestamp:new Date().toISOString()},o=r.map(e=>{let t={...a};return e.secret&&(t.signature=this.generateSignature(JSON.stringify(a),e.secret)),this.sendToEndpoint(e.url,t,e.id)});await Promise.allSettled(o)}catch(e){console.error("Error sending webhook:",e)}}async sendCriticalIssuesWebhook(e,t,i,r,a,o){o&&0!==o.length&&await this.sendWebhook(e,"audit.critical_issues",{auditId:a,websiteId:t,websiteName:i,websiteUrl:r,issueCount:o.length,issues:o,detailsUrl:`${process.env.NEXT_PUBLIC_APP_URL}/audits/${a}`})}async sendPerformanceDegradationWebhook(e,t,i,r,a,o,s,n){await this.sendWebhook(e,"audit.performance_degradation",{auditId:a,websiteId:t,websiteName:i,websiteUrl:r,currentScore:o,previousScore:s,degradationPercentage:n,detailsUrl:`${process.env.NEXT_PUBLIC_APP_URL}/audits/${a}`})}async sendLowScoreWebhook(e,t,i,r,a,o,s){await this.sendWebhook(e,"audit.low_score",{auditId:a,websiteId:t,websiteName:i,websiteUrl:r,score:o,threshold:s,detailsUrl:`${process.env.NEXT_PUBLIC_APP_URL}/audits/${a}`})}async sendToEndpoint(e,t,i){try{let r=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json","User-Agent":"AutomatIQ-Webhook/1.0"},body:JSON.stringify(t)});await this.prisma.webhookDelivery.create({data:{webhookConfigurationId:i,event:t.event,payload:JSON.stringify(t),statusCode:r.status,success:r.ok,response:r.ok?await r.text():"Failed to deliver"}}),r.ok||console.error(`Webhook delivery failed: ${r.status} ${r.statusText}`)}catch(e){console.error("Error delivering webhook:",e),await this.prisma.webhookDelivery.create({data:{webhookConfigurationId:i,event:t.event,payload:JSON.stringify(t),statusCode:0,success:!1,response:`Error: ${e instanceof Error?e.message:"Unknown error"}`}})}}generateSignature(e,t){return i(55511).createHmac("sha256",t).update(e).digest("hex")}}class d{constructor(e){this.prisma=e,this.webhookService=new l(e)}async sendRealTimeAlert({email:e,userName:t,websiteName:i,websiteUrl:r,subject:a,message:o,priority:s,auditId:n}){try{let l=process.env.NEXT_PUBLIC_APP_URL||"http://localhost:3000",d=`${l}/audit/${n}`,u=`
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background-color: ${this.getPriorityColor(s)}; color: white; padding: 15px; text-align: center;">
            <h2 style="margin: 0;">${a}</h2>
            <p style="margin: 5px 0 0 0;">Priority: ${s.toUpperCase()}</p>
          </div>
          <div style="padding: 20px; border: 1px solid #ddd; border-top: none;">
            <p>Hello ${t},</p>
            <p>${o}</p>
            <p>Website: <a href="${r}" target="_blank">${i}</a></p>
            <div style="margin: 30px 0; text-align: center;">
              <a href="${d}" style="background-color: #0070f3; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; font-weight: bold;">View Audit Details</a>
            </div>
            <p>This is an automated notification from AutomatIQ Website Auditor.</p>
          </div>
        </div>
      `;await c.sendEmail({to:e,subject:a,html:u}),console.log(`Real-time alert sent to ${e} for audit ${n}`)}catch(e){console.error("Error sending real-time alert:",e)}}getPriorityColor(e){switch(e){case"critical":return"#d32f2f";case"urgent":return"#f57c00";case"high":return"#f9a825";case"medium":return"#1976d2";default:return"#388e3c"}}async createAuditNotifications(e,t,i,s,n,c=!0){try{let l=await this.prisma.userNotificationPreference.findFirst({where:{userId:i}}),d=l?.minScoreThreshold??70,u=l?.minScoreDrop??5,p=null;if(s){let e=await this.prisma.audit.findUnique({where:{id:s},select:{overallScore:!0,seoScore:!0,performanceScore:!0,accessibilityScore:!0,securityScore:!0,mobileScore:!0,contentScore:!0}});e&&(p={overallScore:e.overallScore||0,categoryScores:{seo:e.seoScore||0,performance:e.performanceScore||0,accessibility:e.accessibilityScore||0,security:e.securityScore||0,mobile:e.mobileScore||0,content:e.contentScore||0}})}let h=await this.prisma.website.findUnique({where:{id:t},select:{name:!0,url:!0}}),m=await this.prisma.user.findUnique({where:{id:i},select:{email:!0,name:!0}}),f=[];if(n.score<d){let s={userId:i,websiteId:t,auditId:e,type:r.SCORE_ALERT,title:`Low overall score: ${n.score}`,message:`Your website's overall audit score is below the threshold of ${d}`,priority:o.HIGH,channel:a.IN_APP,read:!1};f.push(s),c&&m?.email&&h&&await this.sendRealTimeAlert({email:m.email,userName:m.name||"User",websiteName:h.name,websiteUrl:h.url,subject:`[ALERT] Low score detected for ${h.name}`,message:`Your website ${h.name} (${h.url}) has a low overall audit score of ${n.score}, which is below your threshold of ${d}.`,priority:"high",auditId:e})}if(p){let s=p.overallScore-n.score;if(s>=u){let l={userId:i,websiteId:t,auditId:e,type:r.SCORE_DROP,title:`Score dropped by ${s.toFixed(1)} points`,message:`Your website's overall score dropped from ${p.overallScore} to ${n.score}`,priority:o.HIGH,channel:a.IN_APP,read:!1};f.push(l),c&&m?.email&&h&&s>=10&&await this.sendRealTimeAlert({email:m.email,userName:m.name||"User",websiteName:h.name,websiteUrl:h.url,subject:`[URGENT] Significant score drop for ${h.name}`,message:`Your website ${h.name} (${h.url}) has experienced a significant drop in overall score from ${p.overallScore} to ${n.score} (${s.toFixed(1)} points).`,priority:"urgent",auditId:e})}for(let s of Object.keys(n)){if(!n[s]||"object"!=typeof n[s])continue;let c=n[s].score||0,l=p.categoryScores[s]||0,d=l-c;d>=u&&f.push({userId:i,websiteId:t,auditId:e,type:r.CATEGORY_DROP,title:`${s.charAt(0).toUpperCase()+s.slice(1)} score dropped by ${d.toFixed(1)} points`,message:`Your website's ${s.charAt(0).toUpperCase()+s.slice(1)} score dropped from ${l} to ${c}`,priority:o.MEDIUM,channel:a.IN_APP,read:!1})}}let w=this.extractCriticalIssues(n);if(w.length>0){let s={userId:i,websiteId:t,auditId:e,type:r.CRITICAL_ISSUE,title:`${w.length} critical issues detected`,message:`Critical issues found: ${w.slice(0,3).join(", ")}${w.length>3?"...":""}`,priority:o.URGENT,channel:a.IN_APP,read:!1};f.push(s),c&&m?.email&&h&&(await this.sendRealTimeAlert({email:m.email,userName:m.name||"User",websiteName:h.name,websiteUrl:h.url,subject:`[CRITICAL] Security issues detected on ${h.name}`,message:`Your website ${h.name} (${h.url}) has ${w.length} critical issues that require immediate attention:

- ${w.join("\n- ")}`,priority:"critical",auditId:e}),await this.webhookService.triggerWebhook(i,t,{event:"critical_issue_detected",website:h,auditId:e,issues:w,timestamp:new Date().toISOString()}))}f.length>0&&(await this.prisma.notification.createMany({data:f}),await this.prisma.user.update({where:{id:i},data:{unreadNotificationCount:{increment:f.length}}})),console.log(`Created ${f.length} notifications for audit ${e}`)}catch(e){console.error("Error creating audit notifications:",e)}}extractCriticalIssues(e){let t=[];if(e.security?.ssl?.issues&&e.security.ssl.issues.length>0&&t.push("SSL/TLS configuration issues"),e.security?.vulnerabilities&&e.security.vulnerabilities.length>0&&t.push(...e.security.vulnerabilities.map(e=>`Vulnerability: ${e.description||e.name||"Security vulnerability detected"}`)),e.performance?.coreWebVitals){let{lcp:i,fid:r,cls:a}=e.performance.coreWebVitals;i&&i.score<50&&t.push("Poor Largest Contentful Paint (LCP) performance"),r&&r.score<50&&t.push("Poor First Input Delay (FID) performance"),a&&a.score<50&&t.push("Poor Cumulative Layout Shift (CLS) performance")}if(e.accessibility?.violations){let i=e.accessibility.violations.filter(e=>"critical"===e.impact);i.length>0&&t.push(`${i.length} critical accessibility violations`)}return e.mobile?.viewport?.issues&&e.mobile.viewport.issues.length>0&&t.push("Missing or improper viewport configuration"),t}async markNotificationAsRead(e,t){try{await this.prisma.notification.updateMany({where:{id:e,userId:t,readAt:null},data:{read:!0,readAt:new Date}}),await this.updateUnreadCount(t)}catch(e){console.error("Error marking notification as read:",e)}}async markNotificationsAsRead(e,t){try{await this.prisma.notification.updateMany({where:{id:{in:e},userId:t,readAt:null},data:{read:!0,readAt:new Date}}),await this.updateUnreadCount(t)}catch(e){console.error("Error marking notifications as read:",e)}}async markAllNotificationsAsRead(e){try{await this.prisma.notification.updateMany({where:{userId:e,readAt:null},data:{read:!0,readAt:new Date}}),await this.prisma.user.update({where:{id:e},data:{unreadNotificationCount:0}})}catch(e){console.error("Error marking all notifications as read:",e)}}async getNotifications({userId:e,websiteId:t,read:i,type:r,priority:a,page:o=1,limit:s=20}){try{let n={userId:e};t&&(n.websiteId=t),void 0!==i&&(n.read=i),r&&(n.type=r),a&&(n.priority=a);let c=await this.prisma.notification.count({where:n}),l=await this.prisma.notification.count({where:{...n,read:!1}});return{notifications:await this.prisma.notification.findMany({where:n,orderBy:{createdAt:"desc"},skip:(o-1)*s,take:s,include:{website:{select:{name:!0,url:!0}},audit:{select:{id:!0,createdAt:!0,completedAt:!0}}}}),total:c,unread:l}}catch(e){return console.error("Error getting notifications:",e),{notifications:[],total:0,unread:0}}}async updateUnreadCount(e){let t=await this.prisma.notification.count({where:{userId:e,read:!1}});await this.prisma.user.update({where:{id:e},data:{unreadNotificationCount:t}})}async deleteNotification(e,t){try{await this.prisma.notification.deleteMany({where:{id:e,userId:t}}),await this.updateUnreadCount(t)}catch(e){console.error("Error deleting notification:",e)}}async deleteAllNotifications(e){try{await this.prisma.notification.deleteMany({where:{userId:e}}),await this.prisma.user.update({where:{id:e},data:{unreadNotificationCount:0}})}catch(e){console.error("Error deleting all notifications:",e)}}async detectPerformanceDegradation(e,t){try{let i=await this.prisma.audit.findMany({where:{websiteId:e,userId:t,status:"COMPLETED"},orderBy:{completedAt:"desc"},take:5,select:{id:!0,createdAt:!0,completedAt:!0,performanceScore:!0,website:{select:{name:!0,url:!0}}}});if(i.length<3)return;let s=i.slice(1),n=s.reduce((e,t)=>e+(t.performanceScore||0),0)/s.length,c=i[0],l=c.performanceScore||0,d=(n-l)/n;if(d>=.1){await this.prisma.notification.create({data:{userId:t,websiteId:e,auditId:c.id,type:r.PERFORMANCE_DEGRADATION,title:"Performance degradation detected",message:`Your website's performance score has dropped by ${(100*d).toFixed(1)}% compared to the average of previous audits.`,priority:o.HIGH,channel:a.IN_APP,read:!1}});let i=await this.prisma.user.findUnique({where:{id:t},select:{email:!0,name:!0}});i?.email&&c.website&&await this.sendRealTimeAlert({email:i.email,userName:i.name||"User",websiteName:c.website.name,websiteUrl:c.website.url,subject:`[ALERT] Performance degradation detected for ${c.website.name}`,message:`Your website's performance score has dropped by ${(100*d).toFixed(1)}% compared to the average of previous audits (from ${n.toFixed(1)} to ${l}).`,priority:"high",auditId:c.id})}}catch(e){console.error("Error detecting performance degradation:",e)}}}},78335:()=>{},96487:()=>{}};