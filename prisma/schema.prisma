// prisma/schema.prisma
// Database schema for AutomatIQ Web Auditor

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// User model for authentication and account management
model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique
  name          String?
  password      String?   @db.VarChar(255)
  emailVerified DateTime? @map("email_verified")
  image         String?   @db.VarChar(1024)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @default(now()) @map("updated_at") @db.Timestamptz
  websites      Website[]

  @@map("users")
}

// Website model to store information about websites being audited
model Website {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  url       String    @db.VarChar(2048)
  name      String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz
  audits    Audit[]
  pages     Page[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, url])
  @@index([userId])
  @@map("websites")
}

// Audit model to store individual audit runs
model Audit {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  websiteId    String         @map("website_id") @db.Uuid
  status       String         @default("pending") @db.VarChar(50)
  startedAt    DateTime       @default(now()) @map("started_at") @db.Timestamptz
  completedAt  DateTime?      @map("completed_at") @db.Timestamptz
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime       @default(now()) @map("updated_at") @db.Timestamptz
  website      Website        @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  auditResults AuditResult[]
  pageResults  PageAuditResult[]
  summary      AuditSummary?

  @@index([websiteId])
  @@map("audits")
}

// Audit category model for different types of audits
model AuditCategory {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz
  checks      AuditCheck[]

  @@map("audit_categories")
}

// Audit check model for specific checks within categories
model AuditCheck {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId   String            @map("category_id") @db.Uuid
  name         String
  description  String?
  weight       Int               @default(1)
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamptz
  category     AuditCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  auditResults AuditResult[]
  pageResults  PageAuditResult[]

  @@unique([categoryId, name])
  @@index([categoryId])
  @@map("audit_checks")
}

// Audit result model to store results of individual checks
model AuditResult {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auditId   String     @map("audit_id") @db.Uuid
  checkId   String     @map("check_id") @db.Uuid
  status    String     @db.VarChar(50)
  score     Int?
  details   Json?
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz
  audit     Audit      @relation(fields: [auditId], references: [id], onDelete: Cascade)
  check     AuditCheck @relation(fields: [checkId], references: [id], onDelete: Cascade)

  @@unique([auditId, checkId])
  @@index([auditId])
  @@index([checkId])
  @@map("audit_results")
}

// Page model to store information about individual pages
model Page {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  websiteId String            @map("website_id") @db.Uuid
  url       String            @db.VarChar(2048)
  title     String?           @db.VarChar(512)
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime          @default(now()) @map("updated_at") @db.Timestamptz
  website   Website           @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  results   PageAuditResult[]

  @@unique([websiteId, url])
  @@index([websiteId])
  @@map("pages")
}

// Page audit result model for page-specific audit results
model PageAuditResult {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auditId   String     @map("audit_id") @db.Uuid
  pageId    String     @map("page_id") @db.Uuid
  checkId   String     @map("check_id") @db.Uuid
  status    String     @db.VarChar(50)
  score     Int?
  details   Json?
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz
  audit     Audit      @relation(fields: [auditId], references: [id], onDelete: Cascade)
  page      Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)
  check     AuditCheck @relation(fields: [checkId], references: [id], onDelete: Cascade)

  @@unique([auditId, pageId, checkId])
  @@index([auditId])
  @@index([pageId])
  @@index([checkId])
  @@map("page_audit_results")
}

// Audit summary model for overall audit summaries
model AuditSummary {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auditId      String   @unique @map("audit_id") @db.Uuid
  overallScore Int?     @map("overall_score")
  summaryReport Json?    @map("summary_report")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz
  audit        Audit    @relation(fields: [auditId], references: [id], onDelete: Cascade)

  @@map("audit_summaries")
}
