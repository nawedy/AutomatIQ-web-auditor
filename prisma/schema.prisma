generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique
  name            String?
  password        String?           @db.VarChar(255)
  emailVerified   DateTime?         @map("email_verified")
  image           String?           @db.VarChar(1024)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  websites        Website[]
  monitoringAlerts MonitoringAlert[]

  @@map("users")
}

model Website {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String           @map("user_id") @db.Uuid
  url             String           @db.VarChar(2048)
  name            String
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime         @default(now()) @map("updated_at") @db.Timestamptz(6)
  auditSchedule   AuditSchedule?
  audits          Audit[]
  pages           Page[]
  monitoringConfig MonitoringConfig?
  monitoringChecks MonitoringCheck[]
  monitoringAlerts MonitoringAlert[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, url])
  @@index([userId])
  @@map("websites")
}

model Audit {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  websiteId    String            @map("website_id") @db.Uuid
  status       String            @default("pending") @db.VarChar(50)
  startedAt    DateTime          @default(now()) @map("started_at") @db.Timestamptz(6)
  completedAt  DateTime?         @map("completed_at") @db.Timestamptz(6)
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  auditResults AuditResult[]
  summary      AuditSummary?
  website      Website           @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  pageResults  PageAuditResult[]

  @@index([websiteId])
  @@map("audits")
}

model AuditCategory {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  checks      AuditCheck[]

  @@map("audit_categories")
}

model AuditCheck {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId   String            @map("category_id") @db.Uuid
  name         String
  description  String?
  weight       Int               @default(1)
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  category     AuditCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  auditResults AuditResult[]
  pageResults  PageAuditResult[]

  @@unique([categoryId, name])
  @@index([categoryId])
  @@map("audit_checks")
}

model AuditResult {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auditId   String     @map("audit_id") @db.Uuid
  checkId   String     @map("check_id") @db.Uuid
  status    String     @db.VarChar(50)
  score     Int?
  details   Json?
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  audit     Audit      @relation(fields: [auditId], references: [id], onDelete: Cascade)
  check     AuditCheck @relation(fields: [checkId], references: [id], onDelete: Cascade)

  @@unique([auditId, checkId])
  @@index([auditId])
  @@index([checkId])
  @@map("audit_results")
}

model Page {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  websiteId String            @map("website_id") @db.Uuid
  url       String            @db.VarChar(2048)
  title     String?           @db.VarChar(512)
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  results   PageAuditResult[]
  website   Website           @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, url])
  @@index([websiteId])
  @@map("pages")
}

model PageAuditResult {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auditId   String     @map("audit_id") @db.Uuid
  pageId    String     @map("page_id") @db.Uuid
  checkId   String     @map("check_id") @db.Uuid
  status    String     @db.VarChar(50)
  score     Int?
  details   Json?
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  audit     Audit      @relation(fields: [auditId], references: [id], onDelete: Cascade)
  check     AuditCheck @relation(fields: [checkId], references: [id], onDelete: Cascade)
  page      Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([auditId, pageId, checkId])
  @@index([auditId])
  @@index([pageId])
  @@index([checkId])
  @@map("page_audit_results")
}

model AuditSummary {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auditId       String   @unique @map("audit_id") @db.Uuid
  overallScore  Int?     @map("overall_score")
  summaryReport Json?    @map("summary_report")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  audit         Audit    @relation(fields: [auditId], references: [id], onDelete: Cascade)

  @@map("audit_summaries")
}

model AuditSchedule {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  websiteId       String            @unique @map("website_id") @db.Uuid
  enabled         Boolean           @default(false)
  frequency       ScheduleFrequency @default(WEEKLY)
  categories      String[]          @default(["SEO", "PERFORMANCE", "ACCESSIBILITY", "SECURITY", "MOBILE", "CONTENT"])
  lastRunAt       DateTime?         @map("last_run_at") @db.Timestamptz(6)
  nextScheduledAt DateTime?         @map("next_scheduled_at") @db.Timestamptz(6)
  dayOfWeek       Int?              @map("day_of_week")
  dayOfMonth      Int?              @map("day_of_month")
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  website         Website           @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([websiteId])
  @@index([enabled])
  @@index([nextScheduledAt])
  @@map("audit_schedules")
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
}

model MonitoringConfig {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  websiteId          String            @unique @map("website_id") @db.Uuid
  enabled            Boolean           @default(false)
  frequency          String            @default("WEEKLY") 
  alertThreshold     Int               @default(10) @map("alert_threshold")
  metrics            String[]          @default(["overallScore", "seoScore", "performanceScore"])
  emailNotifications Boolean           @default(true) @map("email_notifications")
  slackWebhook       String?           @map("slack_webhook")
  nextCheckAt        DateTime?         @map("next_check_at") @db.Timestamptz(6)
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime          @default(now()) @map("updated_at") @db.Timestamptz(6)
  website            Website           @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([websiteId])
  @@map("monitoring_configs")
}

model MonitoringCheck {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  websiteId   String    @map("website_id") @db.Uuid
  startedAt   DateTime  @default(now()) @map("started_at") @db.Timestamptz(6)
  completedAt DateTime? @map("completed_at") @db.Timestamptz(6)
  status      String    @default("PENDING")
  results     Json?     @db.JsonB
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  website     Website   @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@index([websiteId])
  @@map("monitoring_checks")
}

model MonitoringAlert {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  websiteId String   @map("website_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  title     String
  message   String
  severity  String
  metric    String
  value     Float
  threshold Float
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([websiteId])
  @@index([userId])
  @@index([read])
  @@index([severity])
  @@map("monitoring_alerts")
}
